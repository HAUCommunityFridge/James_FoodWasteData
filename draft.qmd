---
title: "Food Waste Data Dashboard"
author: "HAU AgriDat"
format: 
  dashboard:
    theme: cerulean
orientation: columns
---

## Setup and Data Loading
```{r setup, include=FALSE}
library(tidyverse)
library(lubridate)
library(viridis)
library(plotly)

# Load the cleaned data
cleaned_data <- read.csv("data/cleaned_data.csv")

# Add a column to identify whether the food is taken or donated
cleaned_data <- cleaned_data %>%
  mutate(FoodType = ifelse(grepl("\\(Take\\)", Product), "Take", "Donate"))

# Function to update "Other" categories based on ProductID
update_category <- function(data) {
  lookup_table <- data %>%
    filter(Category != "Other") %>%
    select(ProductId, Category) %>%
    distinct()
  
  updated_data <- data %>%
    left_join(lookup_table, by = "ProductId", suffix = c("", "_new")) %>%
    mutate(Category = ifelse(Category == "Other" & !is.na(Category_new), Category_new, Category)) %>%
    select(-Category_new)
  
  return(updated_data)
}

cleaned_data <- update_category(cleaned_data)

# Convert Quantity to numeric and Date.Time to Date type
cleaned_data$Quantity <- as.numeric(gsub("[^0-9.]", "", cleaned_data$Quantity))
cleaned_data$Date.Time <- as.POSIXct(cleaned_data$Date.Time, format = "%d/%m/%Y %H:%M:%S")

# Create a mapping of original categories to new, more readable names
category_mapping <- c(
  "Bakery, Bread & Baking ingredient" = "Bakery & Bread",
  "Dairy & Dairy alternatives" = "Dairy",
  "Dessert, Confectionery, biscuit & snacks" = "Desserts & Snacks",
  "Dried Pasta, Rice, Noodles & Pulse" = "Pasta & Rice",
  "Drink, Juice & Drink ingredients" = "Drinks",
  "Fruit & Vegetables (Fresh)" = "Fruits & Vegetables",
  "Meat, Poultry, Fish & Egg" = "Meat & Fish",
  "Non food" = "Non-Food",
  "Other" = "Unknown Category",
  "Plant based products" = "Plant-Based",
  "Ready meal, pizza, soup & Salad boxes" = "Ready Meals",
  "Sauces, Pickles, Herbs, Tins & Bottles" = "Sauces & Herbs",
  "Tea Coffee, Dried fruits & Nuts" = "Tea & Coffee"
)

# Update the Category column with new names
cleaned_data <- cleaned_data %>%
  mutate(Category = recode(Category, !!!category_mapping))
```

# Saved Food Used
```{r}
# Filter data for taken food
filtered_data_taken <- cleaned_data %>% filter(FoodType == "Take")

# Calculate the total quantity in grams and kilograms for taken food
total_quantity_g_taken <- sum(filtered_data_taken$Quantity, na.rm = TRUE)
total_quantity_kg_taken <- total_quantity_g_taken / 1000

# Calculate the average daily quantity for taken food
unique_days_taken <- length(unique(as.Date(filtered_data_taken$Date.Time)))
average_daily_quantity_taken <- total_quantity_kg_taken / unique_days_taken

# Round the quantities to 2 decimal places
total_quantity_kg_taken <- round(total_quantity_kg_taken, 2)
average_daily_quantity_taken <- round(average_daily_quantity_taken, 2)
```

## row {width="25%"}

```{r}
#| component: valuebox
#| title: "Total Quantity (Kg)"
#| color: primary
total_quantity_kg_taken
```

```{r}
#| component: valuebox
#| title: "Average Daily Quantity (Kg)"
#| color: secondary
average_daily_quantity_taken
```

## Row {.tabset}
```{r}
#| title: Distribution of Total Quantity by Category
# Distribution of total quantity by category for taken food
category_totals_taken <- filtered_data_taken %>%
  group_by(Category) %>%
  summarise(Total_Quantity_kg = sum(Quantity, na.rm = TRUE) / 1000)

# Identify the 5 categories with the lowest total quantities
lowest_5_categories <- category_totals_taken %>%
  arrange(Total_Quantity_kg) %>%
  slice(1:5) %>%
  pull(Category)

# Recode these categories as "Unknown Category"
filtered_data_taken <- filtered_data_taken %>%
  mutate(Category = ifelse(Category %in% lowest_5_categories, "Unknown Category", Category))

# Recreate the summary for the plot
category_totals_taken <- filtered_data_taken %>%
  group_by(Category) %>%
  summarise(Total_Quantity_kg = sum(Quantity, na.rm = TRUE) / 1000)

# Create bar plot for category distribution
ggplot(category_totals_taken, aes(x = reorder(Category, -Total_Quantity_kg), y = Total_Quantity_kg)) +
  geom_bar(stat = "identity", fill = viridis::viridis(length(unique(category_totals_taken$Category))), color = "black") +
  theme_minimal() +
  labs(title = "Distribution of Total Quantity by Category (Taken Food)", x = "Category", y = "Total Quantity (Kg)") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
#| title: Cumulative Total Quantity (Taken Food)

# Total quantity per day for taken food
daily_totals_taken <- filtered_data_taken %>%
  group_by(Date = as.Date(Date.Time)) %>%
  summarise(Daily_Quantity_kg = sum(Quantity, na.rm = TRUE) / 1000, .groups = 'drop') %>%
  arrange(Date) %>%
  mutate(Cumulative_Quantity_kg = cumsum(Daily_Quantity_kg))

# Create a plotly line plot for daily cumulative totals
plot_ly(daily_totals_taken, x = ~Date, y = ~Cumulative_Quantity_kg, type = 'scatter', mode = 'lines+markers',
        line = list(color = 'blue'), marker = list(color = 'blue')) %>%
  layout(title = 'Cumulative Total Quantity (Taken Food)',
         xaxis = list(title = 'Date'),
         yaxis = list(title = 'Cumulative Quantity (Kg)'))
```

```{r}
#| title: New Users Over Time (Taken Food)

# Count new users over time for taken food
new_users_daily_taken <- filtered_data_taken %>%
  filter(Tender == "First time user") %>%
  group_by(Date = as.Date(Date.Time)) %>%
  summarise(New_Users = n(), .groups = 'drop') %>%
  arrange(Date) %>%
  mutate(Cumulative_New_Users = cumsum(New_Users))

# Create interactive Plotly line plot for new users over time
plot_ly(new_users_daily_taken, x = ~Date, y = ~Cumulative_New_Users, type = 'scatter', mode = 'lines+markers',
        line = list(color = 'orange'), marker = list(color = 'orange')) %>%
  layout(title = 'New Users Over Time (Taken Food)',
         xaxis = list(title = 'Date'),
         yaxis = list(title = 'Cumulative New Users'))
```

# About
Welcome to the Food Waste Data Dashboard. This dashboard provides insights into the amount of food saved through our community fridge initiative, focusing on both taken and donated food.

Key Metrics
Total Quantity (Kg): The total weight of food saved, measured in kilograms.
Average Daily Quantity (Kg): The average weight of food saved per day, measured in kilograms.
New Users: The cumulative number of new users participating in the initiative.

QR Code
Scan the QR code to learn more about the community fridge project.


Definitions
Quantity: Amount of food in kilograms.
User: The type of user (new or returning).
Category: The type of food (e.g., Meat, Poultry, etc.).
