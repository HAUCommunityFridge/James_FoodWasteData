---
title: "Food Waste Data Dashboard"
author: "HAU AgriDat"
format: 
  dashboard:
    theme: cerulean
orientation: columns
---

## Setup and Data Loading
```{r setup, include=FALSE}
library(tidyverse)
library(lubridate)
library(viridis)
library(plotly)
library(qrencoder)

### Some form of Error here qr code comes out blury.
# Generate the QR code with a higher resolution
#qr <- qrencoder::qrencode("https://www.harper-adams.ac.uk/community/988/community-fridge-pilot-project/")

# Save the QR code as a high-resolution PNG file
#png("qr_code.png", width = 1000, height = 1000)
#plot(as.raster(qr), col = c("white", "black"), asp = 1, axes = FALSE, xlab = "", ylab = "", main = "")
#dev.off()

# Load the cleaned data
cleaned_data <- read.csv("data/cleaned_data.csv")

# Add a column to identify whether the food is taken or donated
cleaned_data <- cleaned_data %>%
  mutate(FoodType = ifelse(grepl("\\(Take\\)", Product), "Take", "Donate"))

# Function to update "Other" categories based on ProductID
update_category <- function(data) {
  lookup_table <- data %>%
    filter(Category != "Other") %>%
    dplyr::select(ProductId, Category) %>%
    distinct()
  
  updated_data <- data %>%
    left_join(lookup_table, by = "ProductId", suffix = c("", "_new")) %>%
    mutate(Category = ifelse(Category == "Other" & !is.na(Category_new), Category_new, Category)) %>%
    dplyr::select(-Category_new)
  
  return(updated_data)
}

cleaned_data <- update_category(cleaned_data)

# Convert Quantity to numeric and Date.Time to Date type
cleaned_data$Quantity <- as.numeric(gsub("[^0-9.]", "", cleaned_data$Quantity))
cleaned_data$Date.Time <- as.POSIXct(cleaned_data$Date.Time, format = "%d/%m/%Y %H:%M:%S")

# Create a mapping of original categories to new, more readable names
category_mapping <- c(
  "Bakery, Bread & Baking ingredient" = "Bakery & Bread",
  "Dairy & Dairy alternatives" = "Dairy",
  "Dessert, Confectionery, biscuit & snacks" = "Desserts & Snacks",
  "Dried Pasta, Rice, Noodles & Pulse" = "Pasta & Rice",
  "Drink, Juice & Drink ingredients" = "Drinks",
  "Fruit & Vegetables (Fresh)" = "Fruits & Vegetables",
  "Meat, Poultry, Fish & Egg" = "Meat & Fish",
  "Non food" = "Non-Food",
  "Other" = "Unknown Category",
  "Plant based products" = "Plant-Based",
  "Ready meal, pizza, soup & Salad boxes" = "Ready Meals",
  "Sauces, Pickles, Herbs, Tins & Bottles" = "Sauces & Herbs",
  "Tea Coffee, Dried fruits & Nuts" = "Tea & Coffee"
)

# Update the Category column with new names
cleaned_data <- cleaned_data %>%
  mutate(Category = recode(Category, !!!category_mapping))
```

# Saved Food Used
```{r}
# Filter data for taken food
filtered_data_taken <- cleaned_data %>% filter(FoodType == "Take")

# Calculate the total quantity for taken food
total_quantity_taken <- sum(filtered_data_taken$Quantity, na.rm = TRUE)

# Calculate the average daily quantity for taken food
unique_days_taken <- length(unique(as.Date(filtered_data_taken$Date.Time)))
average_daily_quantity_taken <- total_quantity_taken / unique_days_taken

# Calculate the total number of first-time users who have taken food
total_first_time_users_taken <- sum(filtered_data_taken$Tender == "First time user")

# Round the quantities to 2 decimal places
total_quantity_taken <- round(total_quantity_taken, 2)
average_daily_quantity_taken <- round(average_daily_quantity_taken, 0)
```

## row {width="25%"}

```{r}
#| component: valuebox
#| title: "Total Number Of Food Items Saved"
#| color: primary
total_quantity_taken
```

```{r}
#| component: valuebox
#| title: "Daily Average Number Of Food Items Saved"
#| color: secondary
average_daily_quantity_taken
```
```{r}
#| component: valuebox
#| title: "Cumulative Number Of Unique Users"
#| color: secondary
total_first_time_users_taken
```

## Row {.tabset}
```{r}
#| title: Distribution Of Food Items By Category
# Distribution Of Total Number Of Items By Category For Food Saved
category_totals_taken <- filtered_data_taken %>%
  group_by(Category) %>%
  summarise(Total_Quantity = sum(Quantity, na.rm = TRUE))

# Identify the 5 categories with the lowest total quantities
lowest_5_categories <- category_totals_taken %>%
  arrange(Total_Quantity) %>%
  slice(1:5) %>%
  pull(Category)

# Recode these categories as "Unknown Category"
filtered_data_taken <- filtered_data_taken %>%
  mutate(Category = ifelse(Category %in% lowest_5_categories, "Unknown Category", Category))

# Recreate the summary for the plot
category_totals_taken <- filtered_data_taken %>%
  group_by(Category) %>%
  summarise(Total_Quantity = sum(Quantity, na.rm = TRUE))

# Define the blue color for the bars
blue_color <- "#007BFF"

# Create bar plot for category distribution
ggplot(category_totals_taken, aes(x = reorder(Category, -Total_Quantity), y = Total_Quantity)) +
  geom_bar(stat = "identity", fill = blue_color, color = "black") +
  theme_minimal() +
  labs(title = "Distribution Of Total Number Of Food Items By Category Saved", x = "Category", y = "Total Number Of Items") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
#| title: Cumulative Number Of Food Items

# Total quantity per day for taken food
daily_totals_taken <- filtered_data_taken %>%
  group_by(Date = as.Date(Date.Time)) %>%
  summarise(Daily_Quantity = sum(Quantity, na.rm = TRUE), .groups = 'drop') %>%
  arrange(Date) %>%
  mutate(Cumulative_Quantity_kg = cumsum(Daily_Quantity))

# Create a plotly line plot for daily cumulative totals
plot_ly(daily_totals_taken, x = ~Date, y = ~Cumulative_Quantity_kg, type = 'scatter', mode = 'lines+markers',
        line = list(color = 'blue'), marker = list(color = 'blue')) %>%
  layout(title = 'Cumulative Total Number Of Food Items Saved Over Time',
         xaxis = list(title = 'Date'),
         yaxis = list(title = 'Cumulative Quantity'))
```

```{r}
#| title: Unique Users Over Time

# Count new users over time for taken food
new_users_daily_taken <- filtered_data_taken %>%
  filter(Tender == "First time user") %>%
  group_by(Date = as.Date(Date.Time)) %>%
  summarise(New_Users = n(), .groups = 'drop') %>%
  arrange(Date) %>%
  mutate(Cumulative_New_Users = cumsum(New_Users))

# Create interactive Plotly line plot for new users over time
plot_ly(new_users_daily_taken, x = ~Date, y = ~Cumulative_New_Users, type = 'scatter', mode = 'lines+markers',
        line = list(color = 'orange'), marker = list(symbol = 'square', color = 'orange')) %>%
  layout(title = 'Unique Users Over Time For Saved Food',
         xaxis = list(title = 'Date'),
         yaxis = list(title = 'Cumulative New Users'))
```

# About
## Dashboard Information
<p style="font-size: 20px;">
**Dashboard Information:**
<p style="font-size: 18px;">
Welcome to the Food Waste Data Dashboard. This dashboard provides insights into the amount of food saved through our community fridge initiative, focusing on the food used from our comuity fridge.
</p>

<p style="font-size: 18px;">
Scan our QR code to learn more about the community fridge project.
</p>
<img src="QR.png" style="width: 200px; height: 200px;">

## Key Metrics

### Overview
<p style="font-size: 20px;">
**Overview:**
<p style="font-size: 18px;">
- **Items:** The count of individual food products available or taken from the community fridge.<br>  
- **Unique Users:** The cumulative number of new users participating in the initiative.<br>
- **Category:** The type of food (e.g., Meat, Poultry, etc.).
- **Saved:** The food taken from the community fridge saving it from being discarded or wasted out.<br>
</p>

### Github
<p style="font-size: 20px;">
**Link To My Github Repos:**
<p style="font-size: 18px;">
https://github.com/Jamess200?tab=repositories
</p>