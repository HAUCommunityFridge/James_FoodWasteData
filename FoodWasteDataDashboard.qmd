---
title: "Food Waste Data Dashboard"
author: "HAU AgriDat"
format: 
  dashboard:
    theme: cerulean
---

## Setup and Data Loading
```{r setup, include=FALSE}
library(tidyverse)
library(lubridate)
library(viridis)

# Load the cleaned data
cleaned_data <- read.csv("data/cleaned_data.csv")

# Add a column to identify whether the food is taken or donated
cleaned_data <- cleaned_data %>%
  mutate(FoodType = ifelse(grepl("\\(Take\\)", Product), "Take", "Donate"))

# Function to update "Other" categories based on ProductID
update_category <- function(data) {
  lookup_table <- data %>%
    filter(Category != "Other") %>%
    select(ProductId, Category) %>%
    distinct()
  
  updated_data <- data %>%
    left_join(lookup_table, by = "ProductId", suffix = c("", "_new")) %>%
    mutate(Category = ifelse(Category == "Other" & !is.na(Category_new), Category_new, Category)) %>%
    select(-Category_new)
  
  return(updated_data)
}

cleaned_data <- update_category(cleaned_data)

# Convert Quantity to numeric and Date.Time to Date type
cleaned_data$Quantity <- as.numeric(gsub("[^0-9.]", "", cleaned_data$Quantity))
cleaned_data$Date.Time <- as.POSIXct(cleaned_data$Date.Time, format = "%d/%m/%Y %H:%M:%S")

# Calculate the total quantity in grams and kilograms
total_quantity_grams <- sum(cleaned_data$Quantity, na.rm = TRUE)
total_quantity_kilograms <- total_quantity_grams / 1000

# Calculate the average daily quantity
unique_days <- length(unique(as.Date(cleaned_data$Date.Time)))
average_daily_quantity <- total_quantity_kilograms / unique_days
```

## colum {width="25%"}

```{r}
#| component: valuebox
#| title: "Total Quantity (KG)"
#| color: primary
total_quantity_kilograms
```

```{r}
#| component: valuebox
#| title: "Average Daily Quantity (KG)"
#| color: secondary
average_daily_quantity
```

```{r}
#| component: select
#| id: food_type
#| label: "Select Food Type"
#| choices: ["All", "Take", "Donate"]
#| default: "All"
food_type <- "All"
```

## Row {.tabset}
```{r}
#| title: Distribution count of each category
filtered_data <- cleaned_data
if (food_type != "All") {
  filtered_data <- cleaned_data %>% filter(FoodType == food_type)
}

# Example analysis: count of each category
category_counts <- filtered_data %>%
  group_by(Category) %>%
  summarise(count = n())

# Create bar plot for category distribution
ggplot(category_counts, aes(x = reorder(Category, -count), y = count)) +
  geom_bar(stat = "identity", fill = viridis::viridis(length(unique(category_counts$Category))), color = "black") +
  theme_minimal() +
  labs(title = "Distribution of Categories", x = "Category", y = "Count") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
#| title: Total quantity per day for each category
daily_totals <- filtered_data %>%
  group_by(Date = as.Date(Date.Time), Category) %>%
  summarise(Total_Quantity = sum(Quantity, na.rm = TRUE), .groups = 'drop')

# Create line plot for daily totals
ggplot(daily_totals, aes(x = Date, y = Total_Quantity, color = Category, group = Category)) +
  geom_line(size = 1) +
  geom_point(size = 2) +
  theme_minimal() +
  labs(title = "Daily Total Quantity by Category", x = "Date", y = "Total Quantity") +
  theme(
    legend.position = "bottom",
    legend.title = element_blank(),
    panel.grid.major = element_line(color = "grey80"),
    panel.grid.minor = element_blank()
  ) +
  scale_color_viridis_d()
```

```{r}
#| title: Total quantity per week for each category
# Aggregate data to get total quantity per week for each category
weekly_totals <- filtered_data %>%
  group_by(Week = floor_date(Date.Time, "week"), Category) %>%
  summarise(Total_Quantity = sum(Quantity, na.rm = TRUE), .groups = 'drop')

# Create line plot for weekly totals
ggplot(weekly_totals, aes(x = Week, y = Total_Quantity, color = Category, group = Category)) +
  geom_line(size = 1) +
  geom_point(size = 2) +
  theme_minimal() +
  labs(title = "Weekly Total Quantity by Category", x = "Week", y = "Total Quantity") +
  theme(
    legend.position = "bottom",
    legend.title = element_blank(),
    panel.grid.major = element_line(color = "grey80"),
    panel.grid.minor = element_blank()
  ) +
  scale_color_viridis_d()
```

```{r}
#| title: Total quantity by Tender over time
# Aggregate data to get total quantity by Tender (Returning user vs First time user) over time
tender_daily_totals <- filtered_data %>%
  group_by(Date = as.Date(Date.Time), Tender) %>%
  summarise(Total_Quantity = sum(Quantity, na.rm = TRUE), .groups = 'drop')

# Create line plot for tender daily totals
ggplot(tender_daily_totals, aes(x = Date, y = Total_Quantity, color = Tender, group = Tender)) +
  geom_line(size = 1) +
  geom_point(size = 2) +
  theme_minimal() +
  labs(title = "Daily Total Quantity by Tender Type", x = "Date", y = "Total Quantity") +
  theme(
    legend.position = "bottom",
    legend.title = element_blank(),
    panel.grid.major = element_line(color = "grey80"),
    panel.grid.minor = element_blank()
  ) +
  scale_color_manual(values = c("Returning user" = "darkblue", "First time user" = "orange"))
```

#  {.sidebar}

Dashboard information:

|               |                                        |
|---------------|----------------------------------------|
| **Quantity:** | Amount of food in (kg).                |
| **User:**     | The type of user (new or Returning).   |
| **Category:** | The type of food (Meat, Poultry, etc). |

------------------------------------------------------------------------
